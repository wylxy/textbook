<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sheepion.mapper.ProductMapper">
  <resultMap id="BaseResultMap" type="com.sheepion.model.Product">
    <id column="productId" jdbcType="INTEGER" property="productId" />
    <result column="productName" property="productName" />
    <result column="productDate" property="productDate" />
    <result column="productPeriod" property="productPeriod" />
    <result column="agePeriod" property="agePeriod" />
    <result column="suitablePopulation" property="suitablePopulation" />
    <result column="productType" property="productType" />
    <result column="giftsName" property="giftsName" />
    <result column="customerName" property="customerName" />
    <result column="orderDate" property="orderDate" />
    <result column="orderNum" property="orderNum" />
    <result column="orderPrice" property="orderPrice" />
    <result column="orderTotal" property="orderTotal" />
    <result column="evaluateRate" property="evaluateRate" />
    <result column="evaluateGrade" property="evaluateGrade" />
    <result column="flag" property="flag" />
    <result column="notes" property="notes" />
    <result column="comment" property="comment" />

  </resultMap>
<!--  <sql id="Example_Where_Clause">-->
<!--    <where>-->
<!--      <foreach collection="oredCriteria" item="criteria" separator="or">-->
<!--        <if test="criteria.valid">-->
<!--          <trim prefix="(" prefixOverrides="and" suffix=")">-->
<!--            <foreach collection="criteria.criteria" item="criterion">-->
<!--              <choose>-->
<!--                <when test="criterion.noValue">-->
<!--                  and ${criterion.condition}-->
<!--                </when>-->
<!--                <when test="criterion.singleValue">-->
<!--                  and ${criterion.condition} #{criterion.value}-->
<!--                </when>-->
<!--                <when test="criterion.betweenValue">-->
<!--                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}-->
<!--                </when>-->
<!--                <when test="criterion.listValue">-->
<!--                  and ${criterion.condition}-->
<!--                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">-->
<!--                    #{listItem}-->
<!--                  </foreach>-->
<!--                </when>-->
<!--              </choose>-->
<!--            </foreach>-->
<!--          </trim>-->
<!--        </if>-->
<!--      </foreach>-->
<!--    </where>-->
<!--  </sql>-->
<!--  <sql id="Update_By_Example_Where_Clause">-->
<!--    <where>-->
<!--      <foreach collection="example.oredCriteria" item="criteria" separator="or">-->
<!--        <if test="criteria.valid">-->
<!--          <trim prefix="(" prefixOverrides="and" suffix=")">-->
<!--            <foreach collection="criteria.criteria" item="criterion">-->
<!--              <choose>-->
<!--                <when test="criterion.noValue">-->
<!--                  and ${criterion.condition}-->
<!--                </when>-->
<!--                <when test="criterion.singleValue">-->
<!--                  and ${criterion.condition} #{criterion.value}-->
<!--                </when>-->
<!--                <when test="criterion.betweenValue">-->
<!--                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}-->
<!--                </when>-->
<!--                <when test="criterion.listValue">-->
<!--                  and ${criterion.condition}-->
<!--                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">-->
<!--                    #{listItem}-->
<!--                  </foreach>-->
<!--                </when>-->
<!--              </choose>-->
<!--            </foreach>-->
<!--          </trim>-->
<!--        </if>-->
<!--      </foreach>-->
<!--    </where>-->
<!--  </sql>-->
<!--  <sql id="Base_Column_List">-->
<!--    id, name, id_number, address, street_id, income, contact_info-->
<!--  </sql>-->
<!--  <select id="selectByExample" parameterType="com.sheepion.model.ResidentExample" resultMap="BaseResultMap">-->
<!--    select-->
<!--    <if test="distinct">-->
<!--      distinct-->
<!--    </if>-->
<!--    <include refid="Base_Column_List" />-->
<!--    from resident-->
<!--    <if test="_parameter != null">-->
<!--      <include refid="Example_Where_Clause" />-->
<!--    </if>-->
<!--    <if test="orderByClause != null">-->
<!--      order by ${orderByClause}-->
<!--    </if>-->
<!--  </select>-->
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultType="com.sheepion.model.Order">
    select *
    from `order`
    where productId = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from gifts
    where giftsId = #{id,jdbcType=INTEGER}
  </delete>
<!--  <delete id="deleteByExample" parameterType="com.sheepion.model.ResidentExample">-->
<!--    delete from resident-->
<!--    <if test="_parameter != null">-->
<!--      <include refid="Example_Where_Clause" />-->
<!--    </if>-->
<!--  </delete>-->
<!--  <insert id="insert" parameterType="com.sheepion.model.Resident">-->
<!--    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">-->
<!--      SELECT LAST_INSERT_ID()-->
<!--    </selectKey>-->
<!--    insert into resident (name, id_number, address,-->
<!--      street_id, income, contact_info-->
<!--      )-->
<!--    values (#{name,jdbcType=VARCHAR}, #{idNumber,jdbcType=CHAR}, #{address,jdbcType=VARCHAR},-->
<!--      #{streetId,jdbcType=INTEGER}, #{income,jdbcType=INTEGER}, #{contactInfo,jdbcType=VARCHAR}-->
<!--      )-->
<!--  </insert>-->
  <insert id="insert" parameterType="com.sheepion.model.Order">
<!--    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">-->
<!--      SELECT LAST_INSERT_ID()-->
<!--    </selectKey>-->
    insert into `order`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="null != customerId ">
        customerId,
      </if>
      <if test="null != productId ">
        productId,
      </if>
      <if test="null != giftsId ">
        giftsId,
      </if>
      <if test="null != giftsStatus and '' != giftsStatus">
        giftsStatus
      </if>
      <if test="null != giftDate and '' != giftDate">
        giftDate
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="null != customerId ">
        #{customerId},
      </if>
      <if test="null != productId ">
        #{productId},
      </if>
      <if test="null != giftsId ">
        #{giftsId},
      </if>
      <if test="null != giftsStatus and '' != giftsStatus">
        #{giftsStatus}
      </if>
      <if test="null != giftDate and '' != giftDate">
        #{giftDate}
      </if>
    </trim>
  </insert>
  <select id="countByExample"  resultType="java.lang.Integer">
    select count(*) from gifts
    <if test="name != null">
      giftsName like #{name}
    </if>
  </select>
<!--  &lt;!&ndash;分页模糊查询&ndash;&gt;-->
  <select id="list" resultMap="BaseResultMap" parameterType="map">
    SELECT t.*,f.giftsId giftsName FROM `product`t left join `order` f
    on t.productId = f.productId
    left JOIN gifts g on f.giftsId=g.giftsId    <where>
        <if test="name != null">
          customerName like #{name}
        </if>
    </where>
    limit #{offset}, #{pageSize}
  </select>
  <select id="listEvaluate" resultMap="BaseResultMap" parameterType="map">
    select bb.orderTotal1,bb.giftsPrize, bb.* , round(bb.orderTotal1/bb.giftsPrize*100,2) evaluateRate,
    case when round(bb.orderTotal1/bb.giftsPrize*100,2) &lt;=300 or round(bb.orderTotal1/bb.giftsPrize*100,2) is null then '差'
    when round(bb.orderTotal1/bb.giftsPrize*100,2) &gt; 300 and round(bb.orderTotal1/bb.giftsPrize*100,2) &lt;=600 then '中'
    when round(bb.orderTotal1/bb.giftsPrize*100,2) &gt; 600 and round(bb.orderTotal1/bb.giftsPrize*100,2) &lt;=2000 then '良'
    else '优' end evaluateGrade
    from
    (select ttt.* ,     sum(g.giftsPrize)giftsPrize,
    aa.orderTotal orderTotal1 from(SELECT
    orderDate,
    tt.customerName,
    tt.productName,
    sum( tt.orderNum ) orderNum,
    avg( tt.orderPrice ) orderPrice,
    sum( tt.orderTotal ) orderTotal ,
    f.giftsId giftsName
    FROM
    (
    SELECT
    substr( t.orderDate, 1, 7 ) orderDate,
    t.customerName,
    t.productId,
    t.productName,
    sum( t.orderNum ) orderNum,
    avg( t.orderPrice ) orderPrice,
    round( sum( orderNum )* avg( orderPrice ), 2 ) orderTotal
    FROM
    product t
    GROUP BY
    t.customerName,
    t.productId,
    t.productName,
    substr( t.orderDate, 1,7 )) tt
    LEFT JOIN `order` f ON tt.productId = f.productId
    GROUP BY
    orderDate,
    tt.customerName,
    tt.productName)ttt
    left join gifts g on ttt.giftsName=g.giftsName
    left join (select  sum(orderNum*orderPrice) orderTotal, a.customerName,a.productName from product a  join `order` f on a.productId = f.productId

    where a.orderDate > f.giftDate group by a.customerName,a.productName ) aa
    on aa.customerName = ttt.customerName and aa.productName = ttt.giftsName
    group by substr(ttt.orderDate,1,7) ,
    ttt.customerName,
    ttt.productName,
    g.giftsName) bb
    <where>
      <if test="name != null">
        productName like #{name}
      </if>
    </where>
    order by substr(bb.orderDate,1,7) desc
    limit #{offset}, #{pageSize}
  </select>
  <select id="listEvaluateYear" resultMap="BaseResultMap" parameterType="map">
    select bb.orderTotal1,bb.giftsPrize, bb.* , round(bb.orderTotal1/bb.giftsPrize*100,2) evaluateRate,
    case when round(bb.orderTotal1/bb.giftsPrize*100,2) &lt;=300 or round(bb.orderTotal1/bb.giftsPrize*100,2) is null then '差'
    when round(bb.orderTotal1/bb.giftsPrize*100,2) &gt; 300 and round(bb.orderTotal1/bb.giftsPrize*100,2) &lt;=600 then '中'
    when round(bb.orderTotal1/bb.giftsPrize*100,2) &gt; 600 and round(bb.orderTotal1/bb.giftsPrize*100,2) &lt;=2000 then '良'
    else '优' end evaluateGrade
    from
    (select ttt.* ,     sum(g.giftsPrize)giftsPrize,
    aa.orderTotal orderTotal1 from(SELECT
    orderDate,
    tt.customerName,
    tt.productName,
    sum( tt.orderNum ) orderNum,
    avg( tt.orderPrice ) orderPrice,
    sum( tt.orderTotal ) orderTotal ,
    f.giftsId giftsName
    FROM
    (
    SELECT
    substr( t.orderDate, 1, 4 ) orderDate,
    t.customerName,
    t.productId,
    t.productName,
    sum( t.orderNum ) orderNum,
    avg( t.orderPrice ) orderPrice,
    round( sum( orderNum )* avg( orderPrice ), 2 ) orderTotal
    FROM
    product t
    GROUP BY
    t.customerName,
    t.productId,
    t.productName,
    substr( t.orderDate, 1, 4 )) tt
    LEFT JOIN `order` f ON tt.productId = f.productId
    GROUP BY
    orderDate,
    tt.customerName,
    tt.productName)ttt
    left join gifts g on ttt.giftsName=g.giftsName
    left join (select  sum(orderNum*orderPrice) orderTotal, a.customerName,a.productName from product a  join `order` f on a.productId = f.productId

    where a.orderDate > f.giftDate group by a.customerName,a.productName ) aa
    on aa.customerName = ttt.customerName and aa.productName = ttt.giftsName
    group by substr(ttt.orderDate,1,4) ,
    ttt.customerName,
    ttt.productName,
    g.giftsName) bb
    <where>
      <if test="name != null">
        productName like #{name}
      </if>
    </where>
    order by substr(bb.orderDate,1,4) desc
    limit #{offset}, #{pageSize}
  </select>
  <update id="updateById" parameterType="map">
    update product
    <set>
      <if test="product.flag != null">
        flag = #{product.flag},
      </if>
      <if test="product.comment != null">
        comment = #{product.comment},
      </if>
      <if test="product.notes != null">
        notes = #{product.notes},
      </if>
    </set>
      where productId = #{product.productId}
  </update>
<!--  <update id="updateByExample" parameterType="map">-->
<!--    update resident-->
<!--    set id = #{record.id,jdbcType=INTEGER},-->
<!--      name = #{record.name,jdbcType=VARCHAR},-->
<!--      id_number = #{record.idNumber,jdbcType=CHAR},-->
<!--      address = #{record.address,jdbcType=VARCHAR},-->
<!--      street_id = #{record.streetId,jdbcType=INTEGER},-->
<!--      income = #{record.income,jdbcType=INTEGER},-->
<!--      contact_info = #{record.contactInfo,jdbcType=VARCHAR}-->
<!--    <if test="_parameter != null">-->
<!--      <include refid="Update_By_Example_Where_Clause" />-->
<!--    </if>-->
<!--  </update>-->
  <update id="updateByPrimaryKeySelective" parameterType="com.sheepion.model.Customer">
    update gifts
    <set>
      <if test="null != giftsName and '' != giftsName">giftsName = #{giftsName},</if>
      <if test="null != giftTime ">giftTime = #{giftTime},</if>
      <if test="null != giftsSource and '' != giftsSource">giftsSource = #{giftsSource},</if>
      <if test="null != giftsPeriod and '' != giftsPeriod">giftsPeriod = #{giftsPeriod},</if>
      <if test="null != giftsNumber and '' != giftsNumber">giftsNumber = #{giftsNumber},</if>
      <if test="null != giftsDamageNumber and '' != giftsDamageNumber">giftsDamageNumber = #{giftsDamageNumber},</if>
      <if test="null != giftsDamageKind and '' != giftsDamageKind">giftsDamageKind = #{giftsDamageKind},</if>
      <if test="null != giftsDamageCause and '' != giftsDamageCause">giftsDamageCause = #{giftsDamageCause},</if>
      <if test="null != giftsPrize and '' != giftsPrize">giftsPrize = #{giftsPrize},</if>
      <if test="null != giftTypeId ">giftTypeId = #{giftTypeId}</if>
    </set>
    where giftsId = #{giftsId,jdbcType=INTEGER}
  </update>
<!--  <update id="updateByPrimaryKey" parameterType="com.sheepion.model.Resident">-->
<!--    update resident-->
<!--    set name = #{name,jdbcType=VARCHAR},-->
<!--      id_number = #{idNumber,jdbcType=CHAR},-->
<!--      address = #{address,jdbcType=VARCHAR},-->
<!--      street_id = #{streetId,jdbcType=INTEGER},-->
<!--      income = #{income,jdbcType=INTEGER},-->
<!--      contact_info = #{contactInfo,jdbcType=VARCHAR}-->
<!--    where id = #{id,jdbcType=INTEGER}-->
<!--  </update>-->
</mapper>
